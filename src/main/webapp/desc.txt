의존성 주입 - DI (Dependency Injection)


의존성 - 하나의 객체가 자신이 해야하는 일을 하기 위해서
다른 객체의 도움이 필수적인 관계

스프링 프레임워크에서는 싱글톤 패턴이나 객체 생성 후 사용하는 것을
직접 지원한다.
객체 간의 의존관계를 Spring이 관리하는 것을 의미한다.
이를통해 객체 간의 결합도를 낮추고 코드의 재사용성을 높혀준다.

스프링이 관리하는 객체들은 빈(Bean) 이라고 불린다
그리고 빈을 관리하는 설정파일 root-context.xml

스프링에서 빈(Bean) 객체들을 관리하기 위해서 ApplicationContext(스프링 컨테이너)
객체를 활용한다.

Constructor Injection : 생성자를 통해 의존성 주입
Setter Injection : Setter 메소드를 통해 의존성 주입
Field Injection : @Autowired를 사용해 의존성 주입

생성자 주입방식은
주입 받아야 하는 객체의 변수는 final로 작성
생성자를 이용해서 해당 변수를 생성자의 파라미터로 지정한다.

root-context에서 bean으로 관리하던 방식은 spring 2.5버전 이전의 방식
서블릿에서도 @WebServlet , @WebFilter 와 같이 어노테이션으로 관리
Spring에서도 어노테이션으로 빈을 관리함

@Controller  : MVC 컨트롤러
@Service     : 서비스 계층의 객체
@Repository  : DAO 같은 객체
@Component   : 일반 객체나 유틸리티 객체


인터페이스를 이용해서 결합도를 낮춰줄 수 있다.(느슨한 결합)
인터페이스를 이용하면 실제 객체를 모르고 타입만을 이용해서
코드를 작성할 수 있다.

@Primary 빈 주입시 여러 후보 빈이 있을 때 특정 빈을 우선적으로
주입하도록 지정하는데 사용한다.

@Qualifier 특정 빈을 명시적으로 선택할 수 있게 해준다.


                Maven VS Gradle

설정 파일 형식 pom.xml       // build.gradle  (Groovy/Kotlin)
빌드 속도       느림         // 캐싱 및 병력 빌드로 훨씬 더 빠르다.
유연성         제한적       // 매우 유연함
학습 곡선       완만한 편    //  가파른 편


gradle 단점 - 표준화가 부족함



MyBatis  - SQL Mapping Framework
-> SQL 실행 결과를 객체지향으로 매핑 해준다.
자바의 객체와 데이터베이스의 테이블 간의 매핑을 지원함.
쿼리문은 개발자가 직접 작성할 수 있게하면서 객체와 DB 간 복잡한 매핑을
간소화 해주는 장점이 있다.


디스패쳐 서블릿
Dispatcher Servlet 이란 HTTP 프로토콜로 들어오는 모든 요청을 가장 먼저 받아
적합한 컨트롤러에 위임해주는 프론트 컨트롤러

객체 지향에서 모든 흐름이 하나의 객체를 통해서 진행되는 패턴을 파사드(Facade) 패턴 이라고 한다.
웹 구조에서는 Front - Controller 이라고 부른다.









